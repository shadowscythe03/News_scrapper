name: News Aggregator ML Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:  # Allow manual triggering

jobs:
  ml-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create necessary directories
      run: |
        mkdir -p data/raw data/processed models evaluation
        
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=sqlite:///data/news_database.db" >> $GITHUB_ENV
        echo "FLASK_ENV=production" >> $GITHUB_ENV
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
        echo "HF_HUB_DISABLE_SYMLINKS_WARNING=1" >> $GITHUB_ENV
        echo "TOKENIZERS_PARALLELISM=false" >> $GITHUB_ENV
        
    - name: Initialize DVC
      run: |
        dvc --version
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
    - name: Run ML Pipeline
      run: |
        echo "🚀 Starting ML Pipeline..."
        dvc repro --force
        echo "✅ ML Pipeline completed successfully!"
        
    - name: Show evaluation results
      run: |
        echo "📊 Pipeline Results:"
        if [ -f "evaluation/model_evaluation.json" ]; then
          cat evaluation/model_evaluation.json
        else
          echo "No evaluation file found"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ml-pipeline-results
        path: |
          models/
          evaluation/
          data/processed/
        retention-days: 30
        
    - name: Commit and push results
      if: github.ref == 'refs/heads/main'
      run: |
        git add dvc.lock
        if ! git diff --staged --quiet; then
          git commit -m "🤖 Auto-update: ML pipeline results [skip ci]"
          git push
        fi

  test-application:
    runs-on: ubuntu-latest
    needs: ml-pipeline
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download ML artifacts
      uses: actions/download-artifact@v4
      with:
        name: ml-pipeline-results
        
    - name: Test application modules
      run: |
        echo "🧪 Testing application modules..."
        python -c "from src.web_app.app import create_app; print('✅ Web app imports successfully!')"
        python -c "from src.chatbot.chatbot_engine import ChatbotEngine; print('✅ Chatbot imports successfully!')"
        python -c "from src.classification.classifier import NewsClassifier; print('✅ Classifier imports successfully!')"
        
    - name: Test database functionality
      run: |
        echo "🗄️ Testing database functionality..."
        python -c "from src.scraping.news_scraper import DatabaseManager; db = DatabaseManager(); print('✅ Database connection works!')"

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [ml-pipeline, test-application]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment Summary
      run: |
        echo "🎉 All tests passed! System is ready for deployment."
        echo "📊 ML Pipeline: ✅ Completed"
        echo "🧪 Application Tests: ✅ Passed"
        echo "🚀 Ready for production deployment!"
        echo ""
        echo "🌐 To deploy website online:"
        echo "1. Visit https://render.com and sign up"
        echo "2. Connect your GitHub repository"
        echo "3. Select 'Web Service' deployment"
        echo "4. Build command: pip install -r requirements.txt"
        echo "5. Start command: python main.py web"
        echo "6. Your app will be live at: https://your-app-name.onrender.com"